#!/usr/bin/env bash

DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit ; pwd -P )

build() {
	local image=$1
	echo "INFO: Building ${image}"
	
	# Checking original image availability
	docker images | grep ${image} > /dev/null
	if [ $(echo $?) -eq 1 ]; then
		echo "ERROR: ${image}: not found in docker images"
		return 1
	fi
	
	local rootfs=${DIR}/../images/${image}/rootfs/
	local ro_rootfs=${DIR}/../images/${image}/ro-rootfs/
	
	# Cleaning previous build
	echo "INFO: Removing previous build if any"
	rm -rf ${rootfs} ${ro_rootfs}
	mkdir ${rootfs} ${ro_rootfs}
	
	# Export from docker
	local base=$(docker run -d ${image}:latest)
	docker export ${base} | tar -C ${ro_rootfs} -xv > /dev/null
	if [ $(echo $?) -eq 1 ]; then
		echo "ERROR: while exporting image from docker"
		return 1
  else
    echo "INFO: Image succesfully imported from docker"
  fi
  docker rm ${base} > /dev/null
	
	# Moving editable folder in editable rootfs
	for d in home media mnt opt root srv sys tmp; do
	  mv ${ro_rootfs}${d} ${rootfs}${d}
	done
	rm -rf ${ro_rootfs}proc
	mkdir ${rootfs}proc
	
	# Creating links to no yet mounted read-only folders
	for d in bin dev etc lib run sbin usr var; do
	  ln -s mnt/${d} ${rootfs}/${d}
	done
}

for arg in "$@"
do
  case ${arg} in
    -a| --all)
      for folder in $(cd ${DIR}/../images && ls -d */ | cut -f1 -d'/')
      do
        build "${folder}"
      done
      ;;
    *)
      build "${arg}"
      ;;
  esac
done
echo "Done"
