#!/usr/bin/env bash

DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit ; pwd -P )

build() {
	local image=$1
	echo "INFO: ${image}: Building"
	
	# Checking original image availability
	docker images | grep ${image} > /dev/null
	if [ $(echo $?) -eq 1 ]; then
		>&2 echo "ERROR: ${image}: not found in docker images"
		return 1
	fi
	
	local rootfs=${DIR}/${image}/rootfs/
	local ro_rootfs=${DIR}/${image}/ro-rootfs/
	
	# Cleaning previous build
	echo "INFO: ${image}: Removing previous build if any"
	rm -rf ${rootfs} ${ro_rootfs}
	mkdir ${rootfs} ${ro_rootfs}
	
	# Export from docker
	local base=$(docker run -d edvgui/${image}:latest /bin/echo "Hello World")
	docker export ${base} | tar -C ${ro_rootfs} -xv > /dev/null
	if [ $(echo $?) -eq 1 ]; then
		>&2 echo "ERROR: ${image}: While exporting image from docker"
		return 1
  else
    echo "INFO: ${image}: Image successfully imported from docker"
  fi
  docker stop ${base} > /dev/null
  docker rm ${base} > /dev/null
	
	# Moving editable folder in editable rootfs
	while IFS= read -r line; do
	    mv ${ro_rootfs}${line} ${rootfs}${line}
	done < ${DIR}/${image}/wr.list
	
	rm -rf ${ro_rootfs}proc
	mkdir ${rootfs}proc
	
	# Creating links to no yet mounted read-only folders
	while IFS= read -r line; do
	  ln -s mnt/${line} ${rootfs}/${line}
	done < ${DIR}/${image}/ro.list
}

for arg in "$@"
do
  case ${arg} in
    -a| --all)
      for folder in $(cd ${DIR} && ls -d */ | cut -f1 -d'/')
      do
        build "${folder}"
      done
      ;;
    *)
      build "${arg}"
      ;;
  esac
done
echo "Done"
